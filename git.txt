关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git
关联一个远程库时必须给远程库指定一个名字，origin是默认习惯命名
关联后，使用命令git push -u origin master第一次推送master分支的所有内容
此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；

要克隆一个仓库，首先必须知道仓库的地址，然后使用git clone命令克隆。
如git clone git@github.com:xxxxx/xxxxx.git

分支:
git checkout -b xxx
git checkout命令加上-b参数表示创建并切换
也可以使用命令git switch -c xxx
相当于
git branch xxx    					创建xxx分支
git checkout xxx / git switch xxx	切换至xxx分支

git branch命令查看当前分支
git branch命令会列出所有分支，当前分支前面会标一个*号

git merge命令用于合并指定分支到当前分支
如git merge dev 表示合并dev分支到当前分支

删除分支:
git branch -d xxx   删除xxx分支
git branch -D xxx   强制删除xxx分支

修改分支名称: 先切换到要修改名称分支
git branch -m "新的分支名称"

git log --graph命令可以看到分支合并图
如git log --graph --pretty=oneline --abbrev-commit

Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作
git stash

git stash list命令查看保存得工作现场

恢复工作现场:
一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除
另一种方式是用git stash pop，恢复的同时把stash内容也删了

Git专门提供了一个cherry-pick命令，让我们能复制一个特定的提交到当前分支

修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；
当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场；
在master分支上修复的bug，想要合并到当前dev分支，可以用git cherry-pick <commit>命令，把bug提交的修改“复制”到当前分支，避免重复劳动。

开发一个新feature，最好新建一个分支；
如果要丢弃一个没有被合并过的分支，可以通过git branch -D <name>强行删除。

抓取分支:
git pull
git branch --set-upstream-to=origin/dev dev  pull失败指定本地dev分支与远程origin/dev分支的链接，再pull

变基:
git rebase
把分叉的提交历史“整理”成一条直线，看上去更直观。缺点是本地的分叉提交已经被修改过了

创建标签：
git tag <name>就可以打一个新标签
用命令git tag查看所有标签
git show <tagname>查看标签信息
创建带有说明的标签，用-a指定标签名，-m指定说明文字， 如git tag -a v0.1 -m "version 0.1 released" 1094adb

命令git push origin <tagname>可以推送一个本地标签；
命令git push origin --tags可以推送全部未推送过的本地标签；
命令git tag -d <tagname>可以删除一个本地标签；
命令git push origin :refs/tags/<tagname>可以删除一个远程标签。删除远程标签注意先删除本地标签，再删除远程标签


git ignore注意事项:
# 忽略*.o和*.a文件

 *.[oa]

# 忽略*.b和*.B文件，my.b除外

*.[bB]

!my.b

# 忽略dbg文件和dbg目录

dbg

# 只忽略dbg目录，不忽略dbg文件

dbg/

# 只忽略dbg文件，不忽略dbg目录

dbg

!dbg/

# 只忽略当前目录下的dbg文件和目录，子目录的dbg不在忽略范围内

/dbg

# 以'#'开始的行，被视为注释.

 * ？：代表任意的一个字符
    * ＊：代表任意数目的字符
    * {!ab}：必须不是此类型
    * {ab,bb,cx}：代表ab,bb,cx中任一类型即可
    * [abc]：代表a,b,c中任一字符即可
    * [ ^abc]：代表必须不是a,b,c中任一字符
	
查看总行数
git ls-files | xargs cat | wc -l
查看文件行数
git ls-files | xargs wc -l

合并某个commit节点到当前所在分支
git cherry-pick commit 节点标识符或标签

